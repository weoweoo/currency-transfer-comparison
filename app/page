"use client";

import React, { useState } from "react";
import { ArrowRightLeft, Clock, DollarSign, TrendingUp, Loader2, AlertCircle, Search, Star } from "lucide-react";
import { transformWiseApiResponse, TransformedProvider } from "../utils/transformWiseApiResponse";

// Define your currencies
const currencies = [
  { code: "USD", name: "US Dollar", symbol: "$" },
  { code: "EUR", name: "Euro", symbol: "€" },
  { code: "GBP", name: "British Pound", symbol: "£" },
  { code: "JPY", name: "Japanese Yen", symbol: "¥" },
  { code: "CAD", name: "Canadian Dollar", symbol: "C$" },
  { code: "AUD", name: "Australian Dollar", symbol: "A$" },
  { code: "CHF", name: "Swiss Franc", symbol: "Fr" },
  { code: "CNY", name: "Chinese Yuan", symbol: "¥" },
];

const CurrencyComparison = () => {
  const [sourceAmount, setSourceAmount] = useState("1000");
  const [sourceCurrency, setSourceCurrency] = useState("USD");
  const [targetCurrency, setTargetCurrency] = useState("EUR");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [results, setResults] = useState<TransformedProvider[]>([]);
  const [hasSearched, setHasSearched] = useState(false);

  // Clear old results when currencies change
  const handleSourceCurrencyChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSourceCurrency(e.target.value);
    setResults([]);
    setHasSearched(false);
    setError("");
  };

  const handleTargetCurrencyChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setTargetCurrency(e.target.value);
    setResults([]);
    setHasSearched(false);
    setError("");
  };

  // Fetch comparison
  const fetchComparison = async () => {
    setIsLoading(true);
    setError("");

    try {
      const response = await fetch(
        `/api?sourceCurrency=${sourceCurrency}&targetCurrency=${targetCurrency}&sendAmount=${sourceAmount}`
      );

      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const data = await response.json();

      if (data.error) throw new Error(data.error);

      const transformedResults = transformWiseApiResponse(data);
      setResults(transformedResults);
      setHasSearched(true);
    } catch (err) {
      console.error("API Error:", err);
      setError("Failed to fetch comparison data. Please try again.");
      setResults([]);
      setHasSearched(false);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = () => {
    if (!sourceAmount || parseFloat(sourceAmount) <= 0) {
      setError("Please enter a valid amount");
      return;
    }
    fetchComparison();
  };

  const getCurrencyInfo = (code: string) => currencies.find((c) => c.code === code);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full mb-4">
            <ArrowRightLeft className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-4">Currency Transfer Comparison</h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Compare money transfer services to find the best exchange rates and lowest fees for your international transfers.
          </p>
        </div>

        {/* Search Form */}
        <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Amount */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Amount to Send</label>
                <div className="relative">
                  <DollarSign className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
                  <input
                    type="number"
                    value={sourceAmount}
                    onChange={(e) => setSourceAmount(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors text-lg font-medium"
                    placeholder="1000"
                    min="1"
                    step="0.01"
                  />
                </div>
              </div>

              {/* Source Currency */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">From Currency</label>
                <select
                  value={sourceCurrency}
                  onChange={handleSourceCurrencyChange}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors text-lg font-medium bg-white"
                >
                  {currencies.map((currency) => (
                    <option key={currency.code} value={currency.code}>
                      {currency.code} - {currency.name}
                    </option>
                  ))}
                </select>
              </div>

              {/* Target Currency */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">To Currency</label>
                <select
                  value={targetCurrency}
                  onChange={handleTargetCurrencyChange}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors text-lg font-medium bg-white"
                >
                  {currencies.map((currency) => (
                    <option key={currency.code} value={currency.code}>
                      {currency.code} - {currency.name}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Compare Button */}
            <div className="flex justify-center">
              <button
                onClick={handleSubmit}
                disabled={isLoading}
                className="px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-purple-700 flex items-center gap-2 min-w-[200px] justify-center"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    Comparing...
                  </>
                ) : (
                  <>
                    <Search className="w-5 h-5" />
                    Compare Rates
                  </>
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Error */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-8 flex items-center gap-3">
            <AlertCircle className="w-5 h-5 text-red-500" />
            <p className="text-red-700">{error}</p>
          </div>
        )}

        {/* Loading Overlay */}
        {isLoading && (
          <div className="text-center py-6">
            <Loader2 className="w-8 h-8 mx-auto animate-spin text-blue-600" />
            <p className="text-gray-600 mt-2">Fetching latest rates...</p>
          </div>
        )}

        {/* Results */}
        {!isLoading && hasSearched && results.length > 0 && (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">Comparison Results</h2>
              <p className="text-gray-600">
                Sending {getCurrencyInfo(sourceCurrency)?.symbol}
                {sourceAmount} {sourceCurrency} to {targetCurrency}
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {results.map((provider, index) => (
                <div
                  key={provider.name}
                  className={`bg-white rounded-xl shadow-lg p-6 border-2 transition-all hover:shadow-xl ${
                    index === 0 ? "border-green-200 bg-green-50" : "border-gray-200"
                  }`}
                >
                  {index === 0 && (
                    <div className="flex items-center gap-2 mb-4">
                      <Star className="w-5 h-5 text-green-500 fill-current" />
                      <span className="text-green-600 font-semibold text-sm">BEST DEAL</span>
                    </div>
                  )}

                  <div className="space-y-4">
                    {/* Received Amount */}
                    <div className="bg-gray-50 rounded-lg p-4">
                      <div className="text-sm text-gray-500 mb-1">Recipient gets</div>
                      <div className="text-2xl font-bold text-gray-900">
                        {getCurrencyInfo(targetCurrency)?.symbol}
                        {provider.receivedAmount.toFixed(2)} {targetCurrency}
                      </div>
                    </div>

                    {/* Fees & Rate */}
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <div className="flex items-center gap-2 mb-2">
                          <DollarSign className="w-4 h-4 text-gray-500" />
                          <span className="text-sm font-medium text-gray-700">Total Fees</span>
                        </div>
                        <div className="text-lg font-semibold text-gray-900">
                          {getCurrencyInfo(sourceCurrency)?.symbol}
                          {provider.totalFees.toFixed(2)}
                        </div>
                      </div>

                      <div>
                        <div className="flex items-center gap-2 mb-2">
                          <TrendingUp className="w-4 h-4 text-gray-500" />
                          <span className="text-sm font-medium text-gray-700">Exchange Rate</span>
                        </div>
                        <div className="text-lg font-semibold text-gray-900">{provider.exchangeRate.toFixed(4)}</div>
                      </div>
                    </div>

                    {/* Arrival Time */}
                    <div className="flex items-center gap-2 pt-2 border-t border-gray-200">
                      <Clock className="w-4 h-4 text-gray-500" />
                      <span className="text-sm text-gray-600">
                        Arrives in: <span className="font-medium">{provider.estimatedArrivalTime}</span>
                      </span>
                    </div>

                    <button className="w-full mt-4 px-4 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors">
                      Choose {provider.name}
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* No Results */}
        {!isLoading && hasSearched && results.length === 0 && !error && (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Search className="w-8 h-8 text-gray-400" />
            </div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">No Results Found</h3>
            <p className="text-gray-600">No comparison data available for this currency pair. Please try a different combination.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default CurrencyComparison;
